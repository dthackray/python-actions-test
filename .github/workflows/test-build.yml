name: Test and Build
on:
  # Run after code quality checks workflow completes successfully
  workflow_run:
    workflows: ["Python Code Quality"]
    types:
      - completed
jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v4
      - name: Set commit SHA variables
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - name: Set up Python
        run: uv python install
      - name: Install the project
        run: uv sync --all-extras --dev
      - name: Run tests
        run: |
          PYTHONPATH=$PYTHONPATH:$(pwd)/src uv run pytest tests/ \
            --html=pipeline-pytest-${{ steps.vars.outputs.sha_short }}.html \
            --self-contained-html \
            --cov=src \
            --cov-report=html:pipeline-coverage-${{ steps.vars.outputs.sha_short }}
      - name: Upload Pipeline Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-test-reports-${{ steps.vars.outputs.sha_short }}
          path: |
            pipeline-pytest-${{ steps.vars.outputs.sha_short }}.html
            pipeline-coverage-${{ steps.vars.outputs.sha_short }}
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.test.outputs.sha_short }}
            ghcr.io/${{ github.repository }}:latest
      - name: Extract test reports from image
        run: |
          CONTAINER_ID=$(docker create ghcr.io/${{ github.repository }}:${{ needs.test.outputs.sha_short }})
          docker cp $CONTAINER_ID:/app/reports ./docker-reports
          docker rm $CONTAINER_ID
      - name: Upload Docker Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: docker-test-reports-${{ needs.test.outputs.sha_short }}
          path: docker-reports
